Service Management with SYSTEMD

systemd is a software suite that provides an array of system components for Linux operating systems. The main aim is to unify service configuration and behavior across Linux distributions. Its primary component is a "system and service manager" â€“ an init system used to bootstrap user space and manage user processes.
_____________________________


Creating a SYSTEMD Services

* A SYSTEMD service is a unit configuration file whose name ends in ".service" encodes information about a process controlled and supervised by systemd.

* SYSTEMD services are created at /etc/systemd/system folder with a file name as <filename>.service.

* The service events are automatically logged, and can be seen using the the journalctl -u <service name> command.

* The structure of a unit file is as follows:
1- Second is the Service section inclosed in brackets like this [Service], then a directive called ExecStart used to run a command or an application. And these two lines are enough to define a service.
2- Under the Service section we can add a User with a service account, to make enable it to run the service instead of the root.
3- Use the Restart directive to specify on how and when you want the service to be restarted. It can be Restart=on-failure, which will insure that the system should attempt to restart the service if it fails for some reason.
4- Use the RestartSec directive to specify how many seconds the system should wait before restarting the services it should look like this RestartSec=10.
5- The [Unit] section can come at the beginning before the Service section to add a description and documentation and After directives to the service, the After directives allow us to add dependencies that the services will only work after these dependencies are working, and it can look like this After=postgres.service.
6- Third is a Install section inclosed in brackets like this [Install], and underneath it use the WantedBy directive with a value of systemd target (or run-level as graphical.target) you want to enable it for.

A full service file can look like this, lets say the service file is /etc/systemd/system/project-mercury.service:
___
[Unit]
Description=Python Django for Project mercury
Documentation=http://wiki.caleston-dev.ca/reported

After=postgres.service

[Service]
ExecStart= /usr/bin/project-mercury.sh
User=project_mercury

Restart=on-failure
RestartSec=10

[Install]
WantedBy graphical.target
___


SYSTEMD Tools

* The main two tools used with SYSTEMD services are systemctl and journalctl, systemctl is the command used to manage service in the SYSTEMD manages server. The journalctl is useful when troubleshooting systemd units as it checks the journals or log entries from all parts of the system.

systemctl command:
$ systemctl: to list the services.
$ systemctl start <service name>: used to start a service in the background.
$ systemctl status <service name>: used to check the status of a service. the state of a service can be Active, Inactive, and Failed.
$ systemctl stop <service name>: used to stop a service.
$ systemctl restart <service name>: used to restart a service.
$ systemctl reload <service name>: used to reload the service without interrupting normal functionalities.
$ systemctl enable <service name>: used to enable a service and making  persistent to cross reboot.
$ systemctl disable <service name>: used to disable service at boot.
$ systemctl edit <service name> --full: used to edit the unit file for a service, editing unit files this way apply the changes immediately without having to run the daemon-reload command. 
$ systemctl daemon-reload: used to reload the systemctl daemon so the system can detect any changes made in the service unit files.
$ systemctl get-default: used to see the current run-level or target.
$ systemctl set-default multi-user.target: used to change the default run-level.
$ systemctl list-units -all: used all units that are active, inactive, failed, or in other transient states. to see only information about the active units run the command without the --all flag.


journalctl commands:
$ journalctl: prints all the log entries form the oldest to the newest. To see the logs from the current boot run it with the -b option.
$ journalctl -u <service name>: used to display the logs for a specific unit.



